diff --git a/histo2d.c b/histo2d.c
index b1aa3ae..4025e24 100644
--- a/histo2d.c
+++ b/histo2d.c
@@ -1,4 +1,8 @@
 /*Author: Rainer Hegger. Last modified: May 20, 2014 */
+/*Changes by Bjoern Bastian:
+    2014/05/21: option -r to set reference binning range
+    2014/07/07: option -F for relative frequencies
+*/
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
@@ -9,16 +13,19 @@
 #include <math.h>
 #endif
 
-#define WID_STR "Creates a 2d-histogram of an bivariate time series"
+#define WID_STR "Creates a 2d-histogram of an bivariate time series [2014/07/07: option -F added]"
 
 unsigned long length=ULONG_MAX;
+unsigned long minmaxlength=3;
 unsigned long exclude=0;
 char *column=NULL;
 unsigned int base=16;
 unsigned int verbosity=0xff;
 unsigned int stout=1;
+char density=1;
 char *outfile=NULL;
 char *infile=NULL;
+char *minmaxfile=NULL;
 
 void show_options(char *progname)
 {
@@ -32,6 +39,9 @@ void show_options(char *progname)
   fprintf(stderr,"\t-x # of lines to ignore [default %ld]\n",exclude);
   fprintf(stderr,"\t-c columns to read [default 1,2]\n");
   fprintf(stderr,"\t-b # of intervals per dim [default %u]\n",base);
+  fprintf(stderr,"\t-F output relative frequencies not densities"
+	  " [default not set]\n");
+  fprintf(stderr,"\t-r reference file for binning range [optional]\n");
   fprintf(stderr,"\t-o output file [default 'datafile'.dat ;"
           " If no -o is given: stdout]\n");
   fprintf(stderr,"\t-V verbosity level [default 1]\n\t\t"
@@ -55,6 +65,12 @@ void scan_options(int n,char **argv)
     sscanf(out,"%u",&base);
   if ((out=check_option(argv,n,'V','u')) != NULL)
     sscanf(out,"%u",&verbosity);
+  if ((out=check_option(argv,n,'F','n')) != NULL)
+    density=0;
+  if ((out=check_option(argv,n,'r','o')) != NULL) {
+    if (strlen(out) > 0)
+      minmaxfile=out;
+  }
   if ((out=check_option(argv,n,'o','o')) != NULL) {
     stout=0;
     if (strlen(out) > 0)
@@ -65,14 +81,16 @@ void scan_options(int n,char **argv)
 int main(int argc,char **argv)
 {
   unsigned int dim=2;
+  unsigned long offset[2],negoffset[2],range[2];
   char stdi=0;
+  char *col=NULL;
   double base_1,sx,sy,logmax,logout,norm1,norm2;
-  double min[2],interval[2];
-  double **series;
+  double min[2],interval[2],refmin[2],refinterval[2];
+  double **series,**minmax;
   unsigned long i,j,lmax;
   unsigned int bi,bj;
   unsigned long **box,*box1d;
-  FILE *fout=NULL;
+  FILE *fout=NULL,*test=NULL;
 
   if (scan_help(argc,argv))
     show_options(argv[0]);
@@ -83,6 +101,40 @@ int main(int argc,char **argv)
     what_i_do(argv[0],WID_STR);
 #endif
 
+  /*Get reference range for option '-r'*/
+  if (minmaxfile != NULL) {
+    test=fopen(minmaxfile,"r");
+    if (test == NULL) {
+      fprintf(stderr,"File %s not found!\n",minmaxfile);
+      exit(HISTOGRAM__MINMAX_MISSING_OR_WRONG_FORMAT);
+    }
+    if (verbosity&VER_INPUT) {
+      fprintf(stderr,"Get reference range from file %s\n",minmaxfile);
+    }
+
+    if (column == NULL) {
+      minmax=(double**)get_multi_series(minmaxfile,&minmaxlength,0,&dim,"",1,
+                                        verbosity);
+    }
+    else {
+      check_alloc(col=calloc(strlen(column),(size_t)1));
+      strcpy(col,column);
+      minmax=(double**)get_multi_series(minmaxfile,&minmaxlength,0,&dim,col,
+                                        1,verbosity);
+    }
+
+    if(minmaxlength!=2) {
+      fprintf(stderr,"Wrong format in file '%s'. Needs exactly two lines"
+          " with minima and maxima for each column.\n",minmaxfile);
+      exit(HISTOGRAM__MINMAX_MISSING_OR_WRONG_FORMAT);
+    }
+    refmin[0]=minmax[0][0];
+    refinterval[0]=minmax[0][1]-refmin[0];
+    refmin[1]=minmax[1][0];
+    refinterval[1]=minmax[1][1]-refmin[1];
+  }
+
+  /*Read data*/
   infile=search_datafile(argc,argv,NULL,verbosity);
   if (infile == NULL)
     stdi=1;
@@ -105,6 +157,7 @@ int main(int argc,char **argv)
     series=(double**)get_multi_series(infile,&length,exclude,&dim,column,
                                       1,verbosity);
 
+  /*Get data minima and intervals*/
   min[0]=interval[0]=series[0][0];
   min[1]=interval[1]=series[1][0];
   for (i=1;i<length;i++) {
@@ -116,39 +169,77 @@ int main(int argc,char **argv)
   interval[0] -= min[0];
   interval[1] -= min[1];
 
-  for (i=0;i<length;i++) {
-    series[0][i]=(series[0][i]-min[0]);
-    series[1][i]=(series[1][i]-min[1]);
+  /*Settings*/
+  base_1=(double)base;
+  if (minmaxfile != NULL) {
+    sx=refinterval[0]/base_1;
+    sy=refinterval[1]/base_1;
+    if (refmin[0] > min[0]) {
+      offset[0]=(long)((refmin[0]-min[0])/sx);
+      negoffset[0]=0;
+    }
+    else {
+      offset[0]=0;
+      negoffset[0]=(long)((min[0]-refmin[0])/sx);
+    }
+    if (refmin[1] > min[1]) {
+      offset[1]=(long)((refmin[1]-min[1])/sy);
+      negoffset[1]=0;
+    }
+    else {
+      offset[1]=0;
+      negoffset[1]=(long)((min[1]-refmin[1])/sy);
+    }
+    range[0]=(long)ceil((min[0]+interval[0]-refmin[0])/sx)+offset[0];
+    range[1]=(long)ceil((min[1]+interval[1]-refmin[1])/sy)+offset[1];
+  }
+  else {
+    refmin[0]=min[0];
+    refmin[1]=min[1];
+    refinterval[0]=interval[0];
+    refinterval[1]=interval[1];
+    sx=refinterval[0]/base_1;
+    sy=refinterval[1]/base_1;
+    offset[0]=0;
+    offset[1]=0;
+    negoffset[0]=0;
+    negoffset[1]=0;
+    range[0]=base;
+    range[1]=base;
   }
 
-  check_alloc(box1d=(unsigned long*)malloc(sizeof(unsigned long)*base));
-  for (i=0;i<base;i++)
+  /*Binning*/
+  check_alloc(box1d=(unsigned long*)malloc(sizeof(unsigned long)*range[0]));
+  for (i=negoffset[0];i<range[0];i++)
     box1d[i]=1;
 
-  check_alloc(box=(unsigned long**)malloc(sizeof(unsigned long*)*base));
-  for (i=0;i<base;i++) {
-    check_alloc(box[i]=(unsigned long*)malloc(sizeof(unsigned long)*base));
-    for (j=0;j<base;j++)
+  check_alloc(box=(unsigned long**)malloc(sizeof(unsigned long*)*range[0]));
+  for (i=negoffset[0];i<range[0];i++) {
+    check_alloc(box[i]=(unsigned long*)malloc(sizeof(unsigned long)*range[1]));
+    for (j=negoffset[1];j<range[1];j++)
       box[i][j]=1;
   }
-  base_1=(double)base;
-  sx=interval[0]/base_1;
-  sy=interval[1]/base_1;
-  norm1=(double)(length+base)*sx;
-  norm2=(double)(length+base*base)*sx*sy;
+  if (density) {
+    norm1=(double)(length+(range[0]-negoffset[0]))*sx;
+    norm2=(double)(length+(range[0]-negoffset[0])*(range[1]-negoffset[1]))*sx*sy;
+  }
+  else {
+    norm1=(double)(length+(range[0]-negoffset[0]));
+    norm2=(double)(length+(range[0]-negoffset[0])*(range[1]-negoffset[1]));
+  }
 
   for (i=0;i<length;i++) {
-    bi=(unsigned int)(series[0][i]*base_1/interval[0]);
-    bj=(unsigned int)(series[1][i]*base_1/interval[1]);
-    bi=(bi>=base)? base-1:bi;
-    bj=(bj>=base)? base-1:bj;
+    bi=(unsigned int)((series[0][i]-refmin[0])*base_1/refinterval[0]+offset[0]);
+    bj=(unsigned int)((series[1][i]-refmin[1])*base_1/refinterval[1]+offset[1]);
+    bi=(bi>=range[0])? range[0]-1:bi;
+    bj=(bj>=range[1])? range[1]-1:bj;
     box[bi][bj]++;
     box1d[bi]++;
   }
 
   lmax=0;
-  for (i=0;i<base;i++)
-    for (j=0;j<base;j++)
+  for (i=negoffset[0];i<range[0];i++)
+    for (j=negoffset[1];j<range[1];j++)
       if (box[i][j] > 0)
         lmax=(box[i][j]>lmax)? box[i][j]:lmax;
   logmax=log((double)lmax/norm2);
@@ -158,20 +249,18 @@ int main(int argc,char **argv)
 
   fout=fopen(outfile,"w");
 
-  interval[0] /= base_1;
-  interval[1] /= base_1;
-  for (i=0;i<base;i++) {
-    for (j=0;j<base;j++) {
+  for (i=negoffset[0];i<range[0];i++) {
+    for (j=negoffset[1];j<range[1];j++) {
       logout=log((double)box[i][j]/norm2)-logmax;
       if (stout) {
-        fprintf(stdout,"%e %e %e %e %e\n",((double)(i)+0.5)*interval[0]+min[0],
-                ((double)(j)+0.5)*interval[1]+min[1],
+        fprintf(stdout,"%e %e %e %e %e\n",((double)(i)-offset[0]+0.5)*sx+refmin[0],
+                ((double)(j)-offset[1]+0.5)*sy+refmin[1],
                 (double)box[i][j]/norm2,
                 (double)box[i][j]/(double)box1d[i]/norm2*norm1,-logout);
       }
       else {
-        fprintf(fout,"%e %e %e %e %e\n",((double)(i)+0.5)*interval[0]+min[0],
-                ((double)(j)+0.5)*interval[1]+min[1],
+        fprintf(fout,"%e %e %e %e %e\n",((double)(i)-offset[0]+0.5)*sx+refmin[0],
+                ((double)(j)-offset[1]+0.5)*sy+refmin[1],
                 (double)box[i][j]/norm2,
                 (double)box[i][j]/(double)box1d[i]/norm2*norm1,-logout);
       }
@@ -187,14 +276,20 @@ int main(int argc,char **argv)
   /*Freeing all allocated arrays*/
   if (outfile != NULL) free(outfile);
   if (infile != NULL) free(infile);
+  if (minmaxfile != NULL) free(minmaxfile);
   if (column != NULL) free(column);
   free(box1d);
-  for (i=0;i<base;i++)
+  for (i=negoffset[0];i<range[0];i++)
     free(box[i]);
   free(box);
   free(series[0]);
   free(series[1]);
   free(series);
+  if (minmaxfile != NULL) {
+    free(minmax[0]);
+    free(minmax[1]);
+    free(minmax);
+  }
 
   return 0;
 }
